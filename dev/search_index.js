var documenterSearchIndex = {"docs":
[{"location":"api/#Exported-Functions","page":"API","title":"Exported Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PointClouds]\nPrivate = false\nOrder   = [:type, :function]","category":"page"},{"location":"api/#PointClouds.AbstractSurface","page":"API","title":"PointClouds.AbstractSurface","text":"abstract type AbstractSurface{M<:Manifold,C<:CRS} end\n\nA surface of a PointSurface.\n\n\n\n\n\n","category":"type"},{"location":"api/#PointClouds.ConstantSpacing","page":"API","title":"PointClouds.ConstantSpacing","text":"ConstantSpacing{L<:Unitful.Length} <: AbstractSpacing\n\nConstant node spacing.\n\n\n\n\n\n","category":"type"},{"location":"api/#PointClouds.LogLike","page":"API","title":"PointClouds.LogLike","text":"LogLike <: VariableSpacing\n\nNode spacing based on a log-like function of the distance to nearest boundary x(x+a)     where x is the distance to the nearest boundary and a is a parameter to control     the growth rate as a = 1 - (g - 1) where g is the conventional growth rate     parameter.\n\n\n\n\n\n","category":"type"},{"location":"api/#PointClouds.PointCloud","page":"API","title":"PointClouds.PointCloud","text":"struct PointCloud{M,C} <: Domain{M,C}\n\nA point cloud.\n\n\n\n\n\n","category":"type"},{"location":"api/#PointClouds.PointPart","page":"API","title":"PointClouds.PointPart","text":"struct PointPart{Dim,T,P}\n\nA CAD part.\n\n\n\n\n\n","category":"type"},{"location":"api/#PointClouds.PointSurface","page":"API","title":"PointClouds.PointSurface","text":"struct PointSurface{Dim,T,P,N,A} <: AbstractSurface{Dim,T}\n\nThis is a typical representation of a surface via points.\n\n\n\n\n\n","category":"type"},{"location":"api/#PointClouds.Power","page":"API","title":"PointClouds.Power","text":"Power <: VariableSpacing\n\nNode spacing based on a power of the distance to nearest boundary x^g where x is     the distance to the nearest boundary and g is the growth_rate.\n\n\n\n\n\n","category":"type"},{"location":"api/#PointClouds.SurfaceElement","page":"API","title":"PointClouds.SurfaceElement","text":"struct SurfaceElement{M,C,N,A}\n\nRepresentation of a point on a <:PointSurface.\n\n\n\n\n\n","category":"type"},{"location":"api/#PointClouds.add_surface!-Tuple{PointPart, Vector{<:Point}, Symbol}","page":"API","title":"PointClouds.add_surface!","text":"add_surface!(part::PointPart, points::Vector{<:Point}\n\nAdd a surface to an existing part. Creates a new surface, unless a name of an existing surface is given and it is added to that.\n\n\n\n\n\n","category":"method"},{"location":"api/#PointClouds.compute_normals-Tuple{KNearestSearch, PointSurface}","page":"API","title":"PointClouds.compute_normals","text":"compute_normals(search_method::KNearestSearch, points::PointSurface)\n\nEstimate the normals of a set of points that form a surface. Uses the PCA approach from \"Surface Reconstruction from Unorganized Points\" - Hoppe (1992).\n\n\n\n\n\n","category":"method"},{"location":"api/#PointClouds.compute_normals-Tuple{PointSurface}","page":"API","title":"PointClouds.compute_normals","text":"compute_normals(points::PointSurface; k::Int=5)\n\nEstimate the normals of a set of points that form a surface. Uses the PCA approach from \"Surface Reconstruction from Unorganized Points\" - Hoppe (1992).\n\n\n\n\n\n","category":"method"},{"location":"api/#PointClouds.emptyspace-Union{Tuple{P}, Tuple{P, Vector{P}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}} where P<:Point","page":"API","title":"PointClouds.emptyspace","text":"emptyspace(testpoint, points)\n\nCheck if a point occupies empty space within a certain tolerance.\n\n\n\n\n\n","category":"method"},{"location":"api/#PointClouds.import_surface-Tuple{String}","page":"API","title":"PointClouds.import_surface","text":"import_surface(filepath::String)\n\nImport a surface mesh. Re-uses code from MeshBridge.jl, did not use their package because I needed to calculate face centers which they do not do.\n\n\n\n\n\n","category":"method"},{"location":"api/#PointClouds.orient_normals!-Tuple{AbstractVector{<:Vec}, Any}","page":"API","title":"PointClouds.orient_normals!","text":"orient_normals!(normals::Vector{<:Vec}, points; k::Int=5)\n\nCorrect the orientation of normals on a surface as the compute_normals function does not guarantee if the normal is inward or outward facing. Uses the approach from \"Surface Reconstruction from Unorganized Points\" - Hoppe (1992).\n\n\n\n\n\n","category":"method"},{"location":"api/#PointClouds.orient_normals!-Tuple{KNearestSearch, AbstractVector{<:Vec}, Any}","page":"API","title":"PointClouds.orient_normals!","text":"orient_normals!(search_method::KNearestSearch, normals::AbstractVector{<:Vec}, points)\n\nCorrect the orientation of normals on a surface as the compute_normals function does not guarantee if the normal is inward or outward facing. Uses the approach from \"Surface Reconstruction from Unorganized Points\" - Hoppe (1992).\n\n\n\n\n\n","category":"method"},{"location":"api/#PointClouds.update_normals!-Tuple{PointSurface}","page":"API","title":"PointClouds.update_normals!","text":"update_normals!(surf::PointCloud; k::Int=5)\n\nUpdate the normals of the surfaces of a surf. This is necessary whenever the points change for any reason.\n\n\n\n\n\n","category":"method"},{"location":"api/#Private","page":"API","title":"Private","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PointClouds]\nPublic = false\nOrder   = [:type, :function]","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PointClouds","category":"page"},{"location":"#PointClouds.jl","page":"Home","title":"PointClouds.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PointClouds.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package intends to provide functions for all things regarding point clouds.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simply install the latest stable release using Julia's package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add PointClouds","category":"page"},{"location":"#Planned-Features","page":"Home","title":"Planned Features","text":"","category":"section"}]
}
